{"version":3,"sources":["src/spiral.js","src/point.js","src/line.js","src/angle.js","src/pick.js","App.js","index.js","src/index.js","src/util.js"],"names":["equal","require","CORNERS","nextInSpiral","corner","type","direction","n","length","r","h","row","column","half","Math","floor","module","exports","spiral","c","d","fn","a","sizeOfMap","pow","average","count","index","s","avg","next","Promise","resolve","nextInCorn","alternate","startColumn","startRow","diffRow","abs","diffColumn","point","SIDES","left","right","top","bottom","nextInLine","side","remainder","isRemainderEven","line","cornerColumn","cornerRow","angle","doubleForLoop","length1","length2","start","i","j","pick","conversion","num","computeRows","array","computeCorner","col","ExampleWrapper","styled","div","Tile","Header","Content","Example","props","renderTileId","tile","renderTile","key","className","state","selected","example","Array","tiles","this","name","style","width","height","map","Component","ExamplesWrapper","selectFunction","comp","setTimeout","setState","constructAngleType","quadrant","constructPointType","constructLineType","pickType","end","reduce","acc","constructSpiralType","App","renderExample","demos","ReactDOM","render","StrictMode","document","getElementById","b"],"mappings":"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","file":"static/js/main.33918b93.chunk.js","sourcesContent":["const equal = require(\"./util\").equal;\n\nconst CORNERS = {\n  \"bottom-left\": [0, 1],\n  \"bottom-right\": [1, 1],\n  \"top-right\": [1, 0],\n  \"top-left\": [0, 0]\n};\n\nconst nextInSpiral = (corner, type, direction) => (n, length) => {\n  const row = n % length;\n  const column = (n - row) / length;\n\n  let r;\n  let h;\n\n  // get hemisphere\n  const half = length / 2 + (1 / 2) * (length % 2);\n  if (type === \"in\" && direction === 1) {\n    r = (length % 2) * corner[0];\n  }\n\n  if (type === \"out\" && direction === 1) {\n    r = (length % 2) * (1 - corner[0]);\n  }\n\n  if (type === \"out\" && direction === -1) {\n    r = (length % 2) * (1 - corner[1]);\n  }\n\n  if (type === \"in\" && direction === -1) {\n    r = (length % 2) * corner[1];\n  }\n\n  h = [Math.floor((column + r) / half), Math.floor((row + r) / half)];\n\n  if (type === \"out\" && direction === 1) {\n    if (row === column && equal(h, [0, 0]) && equal(corner, [1, 0])) {\n      return n - 1;\n    }\n\n    if (row === column && equal(h, [1, 1]) && equal(corner, [0, 1])) {\n      return n + 1;\n    }\n\n    if (\n      row === length - column - 1 &&\n      equal(h, [0, 1]) &&\n      equal(corner, [0, 0])\n    ) {\n      return n - length;\n    }\n\n    if (\n      row === length - column - 1 &&\n      equal(h, [1, 0]) &&\n      equal(corner, [1, 1])\n    ) {\n      return n + length;\n    }\n  }\n\n  if (type === \"out\" && direction === -1) {\n    if (row === column && equal(h, [1, 1]) && equal(corner, [1, 0])) {\n      return n + length;\n    }\n\n    if (row === column && equal(h, [0, 0]) && equal(corner, [0, 1])) {\n      return n - length;\n    }\n\n    if (\n      row === length - column - 1 &&\n      equal(h, [1, 0]) &&\n      equal(corner, [0, 0])\n    ) {\n      return n - 1;\n    }\n\n    if (\n      row === length - column - 1 &&\n      equal(h, [0, 1]) &&\n      equal(corner, [1, 1])\n    ) {\n      return n + 1;\n    }\n  }\n\n  if (type === \"in\" && direction === 1) {\n    if (\n      row + 1 === length - column - 1 &&\n      equal(h, [1, 0]) &&\n      equal(corner, [1, 0])\n    ) {\n      return n + 1;\n    }\n\n    if (row - 1 === column && equal(h, [0, 0]) && equal(corner, [0, 0])) {\n      return n + length;\n    }\n\n    if (\n      row - 1 === length - column - 1 &&\n      equal(h, [0, 1]) &&\n      equal(corner, [0, 1])\n    ) {\n      return n - 1;\n    }\n\n    if (row + 1 === column && equal(h, [1, 1]) && equal(corner, [1, 1])) {\n      return n - length;\n    }\n  }\n\n  if (type === \"in\" && direction === -1) {\n    if (\n      row - 1 === length - column - 1 &&\n      equal(h, [1, 0]) &&\n      equal(corner, [1, 0])\n    ) {\n      return n - length;\n    }\n\n    if (row + 1 === column && equal(h, [0, 0]) && equal(corner, [0, 0])) {\n      return n + 1;\n    }\n\n    if (\n      row + 1 === length - column - 1 &&\n      equal(h, [0, 1]) &&\n      equal(corner, [0, 1])\n    ) {\n      return n + length;\n    }\n\n    if (row - 1 === column && equal(h, [1, 1]) && equal(corner, [1, 1])) {\n      return n - 1;\n    }\n  }\n\n  if (direction === 1) {\n    if (row === length - column - 1 && equal(h, [1, 0])) {\n      return n + 1;\n    }\n\n    if (row === column && equal(h, [0, 0])) {\n      return n + length;\n    }\n\n    if (row === length - column - 1 && equal(h, [0, 1])) {\n      return n - 1;\n    }\n\n    if (row === column && equal(h, [1, 1])) {\n      return n - length;\n    }\n  }\n\n  if (direction === -1) {\n    if (row === length - column - 1 && equal(h, [1, 0])) {\n      return n - length;\n    }\n\n    if (row === column && equal(h, [0, 0])) {\n      return n + 1;\n    }\n\n    if (row === length - column - 1 && equal(h, [0, 1])) {\n      return n + length;\n    }\n\n    if (row === column && equal(h, [1, 1])) {\n      return n - 1;\n    }\n  }\n\n  if (row + column >= length && column < row) return n - length * direction;\n  if (row + column >= length && column > row) return n + 1 * direction;\n  if (row + column < length && column < row) return n - 1 * direction;\n  if (row + column < length && column > row) return n + length * direction;\n};\n\nconst spiral = (type, c = \"bottom-left\", d) => async (length, fn) => {\n  const sizeOfMap = Math.pow(length, 2);\n  let average = Math.floor(sizeOfMap / 2);\n  let count = 0;\n  let index;\n\n  const direction = d === \"cw\" ? 1 : -1;\n\n  const corner = CORNERS[c];\n  if (type === \"in\") {\n    index = corner[0] * (sizeOfMap - length) + corner[1] * (length - 1);\n  }\n\n  if (type === \"out\") {\n    const r = (length - 1) % 2;\n    const s = (length - 1) / 2;\n    const avg = Math.pow(length, 2) / 2;\n\n    if (r === 0) {\n      index = Math.floor(avg);\n    } else if (equal(corner, [0, 0])) {\n      index = Math.floor(avg - s - 1);\n    } else if (equal(corner, [0, 1])) {\n      index = Math.floor(avg - s);\n    } else if (equal(corner, [1, 0])) {\n      index = Math.floor(avg + s);\n    } else if (equal(corner, [1, 1])) {\n      index = Math.floor(avg + s + 1);\n    }\n  }\n\n  const next = nextInSpiral(corner, type, direction);\n\n  while (count <= sizeOfMap - 1) {\n    await fn(index);\n    index = next(index, length, average);\n    count += 1;\n  }\n\n  return Promise.resolve();\n};\n\nmodule.exports = {\n  spiral\n};\n","const equal = require(\"./util\").equal;\n\nconst CORNERS = {\n  \"bottom-left\": [0, 1],\n  \"bottom-right\": [1, 1],\n  \"top-right\": [1, 0],\n  \"top-left\": [0, 0]\n};\n\nconst nextInCorn = (corner, alternate) => (index, length) => {\n  const startColumn = corner[0] * (length - 1);\n  const startRow = corner[1] * (length - 1);\n\n  const row = index % length;\n  const column = (index - row) / length;\n\n  const diffRow = Math.abs(startRow - row);\n  const diffColumn = Math.abs(startColumn - column);\n\n  if (equal(corner, [1, 1]) && !alternate) {\n    if (diffRow < diffColumn) {\n      return index - 1;\n    }\n\n    if (diffColumn === 0) {\n      return (length - diffRow - 1) * length - 1;\n    }\n\n    if (diffColumn <= diffRow) {\n      return index + length;\n    }\n  }\n\n  if (equal(corner, [0, 0]) && !alternate) {\n    if (diffRow < diffColumn) {\n      return index + 1;\n    }\n\n    if (diffColumn === 0) {\n      return (diffRow + 1) * length;\n    }\n\n    if (diffColumn <= diffRow) {\n      return index - length;\n    }\n  }\n\n  if (equal(corner, [1, 0]) && !alternate) {\n    if (diffColumn < diffRow) {\n      return index - length;\n    }\n\n    if (diffRow === 0) {\n      return (length - 1) * length + diffColumn + 1;\n    }\n\n    if (diffRow <= diffColumn) {\n      return index - 1;\n    }\n  }\n\n  if (equal(corner, [0, 1]) && !alternate) {\n    if (diffColumn < diffRow) {\n      return index + length;\n    }\n\n    if (diffRow === 0) {\n      return length - diffColumn - 2;\n    }\n\n    if (diffRow <= diffColumn) {\n      return index + 1;\n    }\n  }\n\n  if (equal(corner, [1, 1]) && alternate) {\n    if (diffRow > diffColumn) {\n      return (\n        index - (diffRow - diffColumn) * length + (diffRow - diffColumn) - 1\n      );\n    }\n\n    if (diffColumn === diffRow) {\n      return index - length + diffRow;\n    }\n\n    if (diffRow < diffColumn) {\n      return index + (diffColumn - diffRow) * length - (diffColumn - diffRow);\n    }\n  }\n\n  if (equal(corner, [0, 0]) && alternate) {\n    if (diffRow > diffColumn) {\n      return (\n        index + (diffRow - diffColumn) * length - (diffRow - diffColumn - 1)\n      );\n    }\n\n    if (diffColumn === diffRow) {\n      return index + length - diffRow;\n    }\n\n    if (diffRow < diffColumn) {\n      return index - (diffColumn - diffRow) * length + (diffColumn - diffRow);\n    }\n  }\n\n  if (equal(corner, [1, 0]) && alternate) {\n    if (diffRow > diffColumn) {\n      return (\n        index - (diffRow - diffColumn) * length - (diffRow - diffColumn - 1)\n      );\n    }\n\n    if (diffColumn === diffRow) {\n      return index - length - diffRow;\n    }\n\n    if (diffRow < diffColumn) {\n      return index + (diffColumn - diffRow) * length + (diffColumn - diffRow);\n    }\n  }\n\n  if (equal(corner, [0, 1]) && alternate) {\n    if (diffRow > diffColumn) {\n      return index + (diffRow - diffColumn) * length + (diffRow - diffColumn);\n    }\n\n    if (diffColumn === diffRow) {\n      return index - length * diffRow - 1;\n    }\n\n    if (diffRow < diffColumn) {\n      return (\n        index - (diffColumn - diffRow - 1) * length - (diffColumn - diffRow)\n      );\n    }\n  }\n};\n\nconst point = (c = \"bottom-left\", alternate = false) => async (length, fn) => {\n  const sizeOfMap = Math.pow(length, 2);\n  let count = 0;\n  let index;\n\n  const corner = CORNERS[c];\n\n  index = length * (length - 1) * corner[0] + (length - 1) * corner[1];\n\n  const next = nextInCorn(corner, alternate);\n\n  while (count <= sizeOfMap - 1) {\n    await fn(index);\n    index = next(index, length);\n    count += 1;\n  }\n\n  return Promise.resolve();\n};\n\nmodule.exports = {\n  point\n};\n","const equal = require(\"./util\").equal;\n\nconst SIDES = {\n  left: [0, 0],\n  right: [1, 1],\n  top: [1, 0],\n  bottom: [0, 1]\n};\n\nconst nextInLine = side => (index, length) => {\n  const row = index % length;\n  const column = (index - row) / length;\n\n  const remainder = index % length;\n  const isRemainderEven = remainder % 2 === 0;\n\n  if (equal(side, [0, 0])) {\n    if (isRemainderEven) {\n      const next = length - remainder - 2;\n      if (next <= 0) {\n        if (length % 2 === 0) {\n          return index - length + 3;\n        } else {\n          return index - length + 2;\n        }\n      } else {\n        return index + 2;\n      }\n    } else {\n      const next = length - remainder - 2;\n      if (next < 0) {\n        if (length % 2 === 0) {\n          return index + 1;\n        } else {\n          return index + 1;\n        }\n      } else {\n        return index + 2;\n      }\n    }\n  }\n\n  if (equal(side, [1, 1])) {\n    if (isRemainderEven) {\n      if (row - 2 < 0) {\n        if (length % 2 === 0) {\n          return index - 1;\n        } else {\n          return index + length - 2;\n        }\n      } else {\n        return index - 2;\n      }\n    } else {\n      if (row - 2 < 0) {\n        if (length % 2 === 0) {\n          return index + length - 3;\n        } else {\n          return index - 2;\n        }\n      } else {\n        return index - 2;\n      }\n    }\n  }\n\n  if (equal(side, [0, 1])) {\n    if (column % 2 === 0) {\n      if (column + 2 > length - 1) {\n        if (length % 2 === 0) {\n          return index - (length - 3) * length;\n        } else {\n          return index - (length - 2) * length;\n        }\n      } else {\n        return index + length * 2;\n      }\n    } else {\n      if (column + 2 > length - 1) {\n        if (length % 2 === 0) {\n          return index - (length - 1) * length - 1;\n        } else {\n          return index - (length - 2) * length - 1;\n        }\n      } else {\n        return index + length * 2;\n      }\n    }\n  }\n\n  if (equal(side, [1, 0])) {\n    if (column % 2 === 0) {\n      if (column - 2 < 0) {\n        if (length % 2 === 0) {\n          return index + (length - 1) * length + 1;\n        } else {\n          return index + (length - 2) * length;\n        }\n      } else {\n        return index - length * 2;\n      }\n    } else {\n      if (column - 2 < 0) {\n        if (length % 2 === 0) {\n          return index + (length - 3) * length;\n        } else {\n          return index + (length - 2) * length + 1;\n        }\n      } else {\n        return index - length * 2;\n      }\n    }\n  }\n};\n\nconst line = (s = \"bottom\", alternate = false) => async (length, fn) => {\n  const sizeOfMap = Math.pow(length, 2);\n  let count = 0;\n  let index;\n\n  const side = SIDES[s];\n\n  index = length * (length - 1) * side[0] + (length - 1) * side[1];\n\n  const next = nextInLine(side);\n\n  while (count <= sizeOfMap - 1) {\n    await fn(index);\n    index = next(index, length);\n    count += 1;\n  }\n\n  return Promise.resolve();\n};\n\nmodule.exports = {\n  line\n};\n","const equal = require(\"./util\").equal;\n\nconst CORNERS = {\n  \"bottom-left\": [0, 1],\n  \"bottom-right\": [1, 1],\n  \"top-right\": [1, 0],\n  \"top-left\": [0, 0]\n};\n\nconst nextInCorn = (corner, alternate) => (index, length) => {\n  const cornerColumn = corner[0] * (length - 1);\n  const cornerRow = corner[1] * (length - 1);\n\n  const row = index % length;\n  const column = (index - row) / length;\n\n  const diffRow = Math.abs(cornerRow - row);\n  const diffColumn = Math.abs(cornerColumn - column);\n\n  if (equal(corner, [0, 0])) {\n    if (column === row) {\n      if ((length - diffRow) % 2 === 0) {\n        return index + (length - diffRow - 1);\n      } else {\n        return index + (length - diffRow - 2);\n      }\n    }\n\n    if (diffRow > diffColumn) {\n      return diffRow * length + diffColumn;\n    }\n\n    if (diffColumn >= diffRow) {\n      if (column - diffRow - 2 >= 0) {\n        return diffRow * length + length - (length - diffColumn) - 2;\n      } else {\n        if ((length - diffRow) % 2 === 0) {\n          return index + (length - diffRow) - 1;\n        } else {\n          return index + length - 1 - diffRow - 1;\n        }\n      }\n    }\n  }\n\n  if (equal(corner, [1, 0])) {\n    if (column === length - row - 1) {\n      if ((length - diffRow) % 2 === 0) {\n        return row;\n      } else {\n        return length + row;\n      }\n    }\n\n    if (diffColumn > diffRow) {\n      return (length - diffRow - 1) * length + diffColumn;\n    }\n\n    if (diffRow >= diffColumn) {\n      if (row - diffColumn - 2 >= 0) {\n        return (length - diffRow + 1) * length + diffColumn;\n      } else {\n        if ((length - diffRow) % 2 === 0) {\n          return length + row;\n        } else {\n          return row;\n        }\n      }\n    }\n  }\n\n  if (equal(corner, [1, 1])) {\n    if (row === column) {\n      if ((length - diffRow) % 2 === 0) {\n        return index - (length - diffRow - 1);\n      } else {\n        return index - (length - diffRow - 2);\n      }\n    }\n\n    if (diffRow > diffColumn) {\n      return (row + 1) * length - 1 - diffColumn;\n    }\n\n    if (diffColumn >= diffRow) {\n      if (column + 2 + diffRow < length) {\n        return (length - diffRow - 1) * length + (length - diffColumn + 1);\n      } else {\n        if ((length - diffRow) % 2 === 0) {\n          return index - (length - diffRow - 1);\n        } else {\n          return index - (length - diffRow - 2);\n        }\n      }\n    }\n  }\n\n  if (equal(corner, [0, 1])) {\n    if (row === length - column - 1) {\n      if ((length - diffRow) % 2 === 0) {\n        return index + length * (length - diffRow - 1);\n      } else {\n        return index + length * (length - diffRow - 2);\n      }\n    }\n\n    if (diffColumn > diffRow) {\n      return length - column - 1 + diffRow * length;\n    }\n\n    if (diffRow >= diffRow) {\n      if (row + 2 + diffColumn < length) {\n        return (diffRow - 1) * length - diffColumn - 1;\n      } else {\n        if ((length - diffRow) % 2 === 0) {\n          return index + length * (length - diffRow - 1);\n        } else {\n          return index + length * (length - diffRow);\n        }\n      }\n    }\n  }\n};\n\nconst angle = (c = \"bottom-left\", alternate = false) => async (length, fn) => {\n  const sizeOfMap = Math.pow(length, 2);\n  let count = 0;\n  let index;\n\n  const corner = CORNERS[c];\n\n  index = length * (length - 1) * corner[0] + (length - 1) * corner[1];\n\n  if (equal(corner, [0, 0])) {\n    if (length % 2 === 0) {\n      index = length - 2;\n    } else {\n      index = length - 1;\n    }\n  }\n\n  if (equal(corner, [1, 0])) {\n    if (length % 2 === 0) {\n      index = length;\n    } else {\n      index = 0;\n    }\n  }\n\n  if (equal(corner, [1, 1])) {\n    if (length % 2 === 0) {\n      index = index - length + 2;\n    } else {\n      index = index - length + 1;\n    }\n  }\n\n  if (equal(corner, [0, 1])) {\n    if (length % 2 === 0) {\n      index = length * (length - 1) - 1;\n    } else {\n      index = length * length - 1;\n    }\n  }\n\n  const next = nextInCorn(corner, alternate);\n\n  while (count <= sizeOfMap - 1) {\n    await fn(index);\n    index = next(index, length);\n    count += 1;\n  }\n\n  return Promise.resolve();\n};\n\nmodule.exports = {\n  angle\n};\n","const doubleForLoop = (length1, length2, start = 0) => fn => {\n  for (let i = 0; i < length1; i++) {\n    for (let j = start; j < length2; j++) {\n      fn(i, j);\n    }\n  }\n};\n\nconst pick = (length, conversion) => (type, n = 1, start = 0) => {\n  const num = n + start;\n\n  const computeRows = fn => {\n    let array = [];\n    doubleForLoop(length, num, start)((i, j) => {\n      array = [...array, conversion(fn(i, j))];\n    });\n    return array;\n  };\n\n  const computeCorner = fn => {\n    let array = [];\n    doubleForLoop(num, num, 0)((i, j) => {\n      if (i >= start || j >= start) {\n        array = [...array, conversion(fn(i, j))];\n      }\n    });\n    return array;\n  };\n\n  if (type === \"bottom\") {\n    return computeRows((i, j) => ({ col: i, row: length - 1 - j }));\n  }\n\n  if (type === \"top\") {\n    return computeRows((i, j) => ({ col: i, row: j }));\n  }\n\n  if (type === \"left\") {\n    return computeRows((i, j) => ({ col: j, row: i }));\n  }\n\n  if (type === \"right\") {\n    return computeRows((i, j) => ({ col: length - 1 - j, row: i }));\n  }\n\n  if (type == \"top-left\") {\n    return computeCorner((i, j) => ({ col: i, row: j }));\n  }\n\n  if (type == \"bottom-left\") {\n    return computeCorner((i, j) => ({ col: i, row: length - 1 - j }));\n  }\n\n  if (type == \"top-right\") {\n    return computeCorner((i, j) => ({\n      col: length - 1 - i,\n      row: j\n    }));\n  }\n\n  if (type == \"bottom-right\") {\n    return computeCorner((i, j) => ({\n      col: length - 1 - i,\n      row: length - 1 - j\n    }));\n  }\n\n  return [];\n};\n\nmodule.exports = {\n  pick\n};\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { point, spiral, line, angle, pick } from './src';\n\nconst SPEED = 200;\nconst LENGTH = 10;\nconst TILE_LENGTH = 30;\n\nconst ExampleWrapper = styled.div``;\n\nconst Tile = styled.div`\n  align-items: center;\n  border: 1px solid black;\n  display: flex;\n  font-size: 12px;\n  height: ${TILE_LENGTH}px;\n  justify-content: center;\n  width: ${TILE_LENGTH}px;\n\n  &.selected {\n    background: red;\n    color: white;\n  }\n`;\n\nconst Header = styled.div`\n  height: 35px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n\n  button {\n    margin-left: 10px;\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 10px;\n`;\n\nclass Example extends Component {\n  constructor(props) {\n    super(props);\n    const length = props.example.length;\n    const array = new Array(length * length);\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < length; j++) {\n        array[j * length + i] = i * length + j;\n      }\n    }\n    this.state = {\n      tiles: array,\n      selected: {}\n    };\n  }\n\n  componentDidMount() {\n    this.props.example.fn(this);\n  }\n\n  renderTileId = tile => {\n    return tile;\n  };\n\n  renderTile = tile => (\n    <Tile key={tile} className={this.state.selected[tile] ? \"selected\" : \"\"}>\n      {this.renderTileId(tile)}\n    </Tile>\n  );\n\n  render() {\n    const { length, name } = this.props.example;\n    return (\n      <ExampleWrapper>\n        <Header>\n          {name}\n          {/* <button>Restart</button> */}\n        </Header>\n        <Content\n          style={{\n            width: `${TILE_LENGTH * length}px`,\n            height: `${TILE_LENGTH * length}px`\n          }}\n        >\n          {this.state.tiles.map(this.renderTile)}\n        </Content>\n      </ExampleWrapper>\n    );\n  }\n}\n\nconst ExamplesWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst selectFunction = comp => i =>\n  new Promise(resolve =>\n    setTimeout(() => {\n      comp.setState({\n        selected: { ...comp.state.selected, [i]: true }\n      });\n      resolve();\n    }, SPEED)\n  );\n\nconst constructAngleType = quadrant => ({\n  name: `angle - ${quadrant}`,\n  length: LENGTH,\n  selected: {},\n  fn: comp => angle(quadrant)(LENGTH, selectFunction(comp))\n});\n\nconst constructPointType = (quadrant, alternate) => ({\n  name: `point - ${quadrant} - alternate:${alternate ? \"true\" : \"false\"}`,\n  length: LENGTH,\n  selected: {},\n  fn: comp => point(quadrant, alternate)(LENGTH, selectFunction(comp))\n});\n\nconst constructLineType = quadrant => ({\n  name: `line - ${quadrant}`,\n  length: LENGTH,\n  selected: {},\n  fn: comp => line(quadrant)(LENGTH, selectFunction(comp))\n});\n\nconst pickType = (type, start, end) => ({\n  name: `pick - ${type} - ${start} - ${end}`,\n  length: LENGTH,\n  selected: {},\n  fn: comp =>\n    comp.setState({\n      selected: pick(LENGTH, ({ row, col }) => col * LENGTH + row)(\n        type,\n        start,\n        end\n      ).reduce((acc, i) => ({ ...acc, [i]: true }), {})\n    })\n});\n\nconst constructSpiralType = (type, quadrant, direction) => ({\n  name: `spiral - ${type} - ${quadrant} - ${direction}`,\n  length: LENGTH,\n  selected: {},\n  fn: comp => spiral(type, quadrant, direction)(LENGTH, selectFunction(comp))\n});\n\nexport class App extends Component {\n  renderExample = (example, key) => <Example example={example} key={key} />;\n\n  render() {\n    let demos = [];\n    demos = [\n      ...demos,\n      constructAngleType(\"top-left\"),\n      constructAngleType(\"top-right\"),\n      constructAngleType(\"bottom-left\"),\n      constructAngleType(\"bottom-right\"),\n      constructLineType(\"bottom\", true),\n      constructLineType(\"left\", true),\n      constructLineType(\"right\", true),\n      constructLineType(\"top\", true),\n      constructPointType(\"bottom-left\", true),\n      constructPointType(\"top-right\", true),\n      constructPointType(\"top-left\", true),\n      constructPointType(\"bottom-right\", true),\n      constructPointType(\"bottom-right\"),\n      constructPointType(\"top-right\"),\n      constructPointType(\"top-left\"),\n      constructPointType(\"bottom-left\"),\n      constructSpiralType(\"in\", \"bottom-left\", \"cw\"),\n      constructSpiralType(\"in\", \"bottom-right\", \"cw\"),\n      constructSpiralType(\"in\", \"top-left\", \"cw\"),\n      constructSpiralType(\"in\", \"top-right\", \"cw\"),\n      constructSpiralType(\"out\", \"bottom-left\", \"cw\"),\n      constructSpiralType(\"out\", \"bottom-right\", \"cw\"),\n      constructSpiralType(\"out\", \"top-left\", \"cw\"),\n      constructSpiralType(\"out\", \"top-right\", \"cw\"),\n      constructSpiralType(\"in\", \"bottom-left\", \"ccw\"),\n      constructSpiralType(\"in\", \"bottom-right\", \"ccw\"),\n      constructSpiralType(\"in\", \"top-left\", \"ccw\"),\n      constructSpiralType(\"in\", \"top-right\", \"ccw\"),\n      constructSpiralType(\"out\", \"bottom-left\", \"ccw\"),\n      constructSpiralType(\"out\", \"bottom-right\", \"ccw\"),\n      constructSpiralType(\"out\", \"top-left\", \"ccw\"),\n      constructSpiralType(\"out\", \"top-right\", \"ccw\"),\n      pickType(\"left\", 2, 0),\n      pickType(\"top\", 2, 0),\n      pickType(\"right\", 2, 0),\n      pickType(\"bottom\", 2, 0),\n      pickType(\"left\", 2, 1),\n      pickType(\"top\", 2, 1),\n      pickType(\"right\", 2, 1),\n      pickType(\"bottom\", 2, 1),\n      pickType(\"top-right\", 3, 0),\n      pickType(\"top-right\", 2, 2),\n      pickType(\"top-left\", 3, 0),\n      pickType(\"top-left\", 2, 2),\n      pickType(\"bottom-left\", 3, 0),\n      pickType(\"bottom-left\", 2, 2),\n      pickType(\"bottom-right\", 3, 0),\n      pickType(\"bottom-right\", 2, 2),\n    ];\n    return <ExamplesWrapper>{demos.map(this.renderExample)}</ExamplesWrapper>;\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","const spiral = require(\"./spiral\").spiral;\nconst point = require(\"./point\").point;\nconst line = require(\"./line\").line;\nconst angle = require(\"./angle\").angle;\nconst pick = require(\"./pick\").pick;\n\nmodule.exports = {\n  spiral,\n  point,\n  line,\n  angle,\n  pick\n};\n","const equal = (a, b) => {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length != b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\nmodule.exports = {\n  equal\n};\n"],"sourceRoot":""}